import 'dart:io';

import 'package:path/path.dart' as path;

/// {@template code_generator}
/// A class which can be extended to generate code for a specific target
/// {@endtemplate}
class CodeGenerator {
  /// {@macro code_generator}
  CodeGenerator({
    required this.target,
  });

  /// The target file to generate code for
  final File target;

  /// The line comment symbol for the target file in its language.
  /// This is based on the file extension of the target file.
  String get lineComment {
    switch (path.extension(target.path)) {
      case '.dart':
        return '//';
      case '.gradle':
        return '//';
      case '.xcconfig':
        return '//';
      case '.yaml':
        return '#';
      default:
        return '';
    }
  }

  /// The comment to be used to mark the start of generated code
  String get generatedCodeStartComment =>
      '$lineComment start of code generated by package:dart_define, DO NOT modify or remove these comments';

  /// The comment to be used to mark the end of generated code
  String get generatedCodeEndComment =>
      '$lineComment end of code generated by package:dart_define, DO NOT modify or remove these comments';

  /// Wraps the given [content] with the generated code comments
  String wrapWithComments(String content) =>
      '$generatedCodeStartComment\n$content\n$generatedCodeEndComment';

  /// Writes the given [content] to the target file.
  /// If the target file does not exist, it will be created.
  void writeTarget(String content) {
    if (!target.existsSync()) {
      target.createSync(recursive: true);
    }

    target.writeAsStringSync(content);
  }

  /// Reads the target file as a string.
  /// If the target file does not exist, it will be created.
  String readTarget() {
    if (!target.existsSync()) {
      target.createSync(recursive: true);
    }
    return target.readAsStringSync();
  }

  /// Deletes the generated code from the target file. This will only
  /// delete the code between the generated code comments.
  void deleteGeneratedCode() {
    final content = readTarget()
      ..replaceAll(
        RegExp(
          '$generatedCodeStartComment.*$generatedCodeEndComment',
          multiLine: true,
          dotAll: true,
          caseSensitive: false,
        ),
        '',
      );

    writeTarget(
      content,
    );
  }

  /// Generates the code for the target file. This method shall be implemented
  /// by a subclass of [CodeGenerator].
  void generate() {
    throw UnimplementedError(
      'generate() must be implemented in a subclass of CodeGenerator',
    );
  }
}
